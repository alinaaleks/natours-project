$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

/* in order to do each browser look the same way (basic RESET) */
*,
*::after,
*::before {
  /* in defauld box-sizing does not get inherited */
  box-sizing: inherit;
  padding: 0;
  margin: 0;
}

html {
  /* now 1 REM = 10px (FONT RESET). % from the default. Browser's default of user's setting   */
  font-size: 62.5%;
}

body {
  box-sizing: border-box;
  padding: 3rem;
  color: $color-grey-dark;
  font-family: "Lato", sans-serif;
  /* font-size: 16px; */
  font-weight: 400;
  line-height: 1.7;
}

.header {
  position: relative;
  height: 95vh;
  background-position: top;
  /* first one goes on top */
  background-image: linear-gradient(
    to right bottom, 
    rgba($color-primary-light, 0.8), 
    rgba($color-primary-dark, 0.8)), 
    url(../img/hero.jpg);
  /* whatever the width or the element it will always try to fit to it */
  background-size: cover;
  /* specify 4 corners - start from top left moving clockwise */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    /* in relation to the parent element */
    top: 40%;
    left: 50%;
    /* in relation to the element itself */
    transform: translate(-50%, -50%);
    text-align: center;
  }
}

/* animation can be used in multiple places
.logo:hover {
  animation: moveInRight 1s ease-out;
} */

.heading-primary {
  margin-bottom: 6rem;
  color: $color-white;
  text-transform: uppercase;
  /* part behind the element  */
  backface-visibility: hidden;

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* another properties
    when it will start play
    animation-delay: 3s;
    how many times
    animation-iteration-count: 3; */
  }
  
  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
  }
}

/* ANIMATION */
@keyframes moveInLeft {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

/* finish */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  /* 60% {
    transform: rotate(180deg);
  } */

  80% {
    transform: translateX(-1rem);
  }

/* finish */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn {
  &:link, &:visited {
    /* inline blick is treated as text */
    display: inline-block;
    position: relative;
    padding: 1.5rem 4rem;
    border-radius: 10rem;
    text-transform: uppercase;
    text-decoration: none;
    font-size: 1.6rem;
    /* change initial state more smoothly */
    transition: all .2s;
  }
  
  &:hover {
    /* in relation to the initial state */
    transform: translateY(-.3rem);
    /* X direction, Y direction, blur, color*/
    box-shadow: 0 1rem 2rem rgba($color-black,.2);

    /* after pseudo element only when we have btn on the hover state */
    
    &::after {
    opacity: 0;
    /* increase the element */
    transform: scaleX(1.4) scaleY(1.6);
  }
  }
  
  &:active {
    /* in relation to the initial state */
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba($color-black,.2);
  }
  
  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      /* in order for pseudo element also to be white */
      background-color: $color-white;
    }
  }
  
  &::after {
    /* pseudo element which goes behind the button/ this element is treated as a child element (of the button) */
    display: inline-block;
    /* in relation to closer "relative" positioning it can find - and now it should be hidden behind the button */
    position: absolute;
    top: 0;
    left: 0;
    /* defines the position of element if it's one on top of the other - make it definitely behind*/
    z-index: -1;
    width: 100%;
    height: 100%;
    border-radius: 10rem;
    content: "";
    transition: all .4s;
  }
  
  &--animated {
    /* name, duration, timing-function, delay */ 
    animation: moveInBottom .5s ease-out .75s;
    /* automatically applies 0% animation before the animation starts - so the btn will appear on the bottom where animation starts*/
    animation-fill-mode: backwards;
  }
}